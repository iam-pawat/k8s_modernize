---
# Source: rabbitmq-ha/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-rabbitmq-ha

  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.33.0
    release: 'rabbitmq'
type: Opaque
data:
  rabbitmq-username: 'YWRtaW4='
  rabbitmq-password: 'ZGVmYXVsdDEyMw=='
  rabbitmq-management-username: 'bWFuYWdlbWVudA=='
  rabbitmq-management-password: 'bWFuYWdlMQ=='
  rabbitmq-erlang-cookie: 'N0hEZU54ZmtzME5SVnAzMnZ2QXZxeDFoUnlqaVJUZ1A='
  definitions.json: 'ewogICJnbG9iYWxfcGFyYW1ldGVycyI6IFsKICAgIAogIF0sCiAgInVzZXJzIjogWwogICAgewogICAgICAibmFtZSI6ICJtYW5hZ2VtZW50IiwKICAgICAgInBhc3N3b3JkIjogIm1hbmFnZTEiLAogICAgICAidGFncyI6ICJtYW5hZ2VtZW50IgogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiYWRtaW4iLAogICAgICAicGFzc3dvcmQiOiAiZGVmYXVsdDEyMyIsCiAgICAgICJ0YWdzIjogImFkbWluaXN0cmF0b3IiCiAgICB9CiAgXSwKICAidmhvc3RzIjogWwogICAgewogICAgICAibmFtZSI6ICIvIgogICAgfQogIF0sCiAgInBlcm1pc3Npb25zIjogWwogICAgewogICAgICAidXNlciI6ICJhZG1pbiIsCiAgICAgICJ2aG9zdCI6ICIvIiwKICAgICAgImNvbmZpZ3VyZSI6ICIuKiIsCiAgICAgICJyZWFkIjogIi4qIiwKICAgICAgIndyaXRlIjogIi4qIgogICAgfQogIF0sCiAgInBhcmFtZXRlcnMiOiBbCiAgICAKICBdLAogICJwb2xpY2llcyI6IFsKICAgIAogIF0sCiAgInF1ZXVlcyI6IFsKICAgIAogIF0sCiAgImV4Y2hhbmdlcyI6IFsKICAgIAogIF0sCiAgImJpbmRpbmdzIjogWwogICAgCiAgXQp9'
---
# Source: rabbitmq-ha/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-rabbitmq-ha

  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.33.0
    release: rabbitmq
data:
  enabled_plugins: |
    [
      rabbitmq_shovel,
      rabbitmq_shovel_management,
      rabbitmq_federation,
      rabbitmq_federation_management,
      
      rabbitmq_consistent_hash_exchange,
      rabbitmq_management,
      rabbitmq_peer_discovery_k8s
    ].
  rabbitmq.conf: |
    ## RabbitMQ configuration
    ## Ref: https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example
    ## Authentification
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10
    # Set to false if automatic cleanup of absent nodes is desired.
    # This can be dangerous, see http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup.
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    ## The default "guest" user is only permitted to access the server
    ## via a loopback interface (e.g. localhost)
    loopback_users.guest = false
    management.load_definitions = /etc/definitions/definitions.json
    ## Memory-based Flow Control threshold
    vm_memory_high_watermark.absolute = 256MB
    ## Auth HTTP Backend Plugin
    ## LDAP Plugin
    ## MQTT Plugin
    ## Web MQTT Plugin
    ## STOMP Plugin
    ## Web STOMP Plugin
    ## AMQPS support
---
# Source: rabbitmq-ha/templates/service-discovery.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-rabbitmq-ha-discovery

  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.33.0
    release: rabbitmq
spec:
  clusterIP: None
  ports:
    - name: http
      protocol: TCP
      port: 15672
      targetPort: http
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: amqp
    - name: epmd
      protocol: TCP
      port: 4369
      targetPort: epmd
  publishNotReadyAddresses: true
  selector:
    app: rabbitmq-ha
    release: rabbitmq
  type: ClusterIP
---
# Source: rabbitmq-ha/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-rabbitmq-ha

  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.33.0
    release: rabbitmq
spec:
  clusterIP: 'None'
  ports:
    - name: http
      protocol: TCP
      port: 15672
      targetPort: http
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: amqp
    - name: epmd
      protocol: TCP
      port: 4369
      targetPort: epmd

  selector:
    app: rabbitmq-ha
    release: rabbitmq
  type: ClusterIP
---
# Source: rabbitmq-ha/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq-rabbitmq-ha

  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.33.0
    release: rabbitmq
spec:
  podManagementPolicy: OrderedReady
  serviceName: rabbitmq-rabbitmq-ha-discovery
  replicas: 3
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: rabbitmq-ha
      release: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq-ha
        release: rabbitmq
      annotations:
        checksum/config: 36fa3db8a70487f60176c50f4f651a4e094a3f73f768826ca48670c15f3678c5
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 100

      serviceAccountName: payment-sa
      initContainers:
        - name: bootstrap
          image: busybox:1.30.1
          imagePullPolicy: IfNotPresent
          command: ['sh']
          args:
            - '-c'
            - |
              set -ex
              cp /configmap/* /etc/rabbitmq
              echo "${RABBITMQ_ERLANG_COOKIE}" > /var/lib/rabbitmq/.erlang.cookie
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: RABBITMQ_MNESIA_DIR
              value: /var/lib/rabbitmq/mnesia/rabbit@$(POD_NAME).rabbitmq-rabbitmq-ha-discovery
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-rabbitmq-ha
                  key: rabbitmq-erlang-cookie
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              memory: 1024Mi

          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /etc/rabbitmq
            - name: data
              mountPath: /var/lib/rabbitmq
      containers:
        - name: rabbitmq-ha
          image: rabbitmq:3.7.15-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: epmd
              protocol: TCP
              containerPort: 4369
            - name: amqp
              protocol: TCP
              containerPort: 5672
            - name: http
              protocol: TCP
              containerPort: 15672
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
                  | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
                  | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: RABBITMQ_USE_LONGNAME
              value: 'true'
            - name: RABBITMQ_NODENAME
              value: rabbit@$(MY_POD_NAME).rabbitmq-rabbitmq-ha-discovery
            - name: K8S_HOSTNAME_SUFFIX
              value: .rabbitmq-rabbitmq-ha-discovery
            - name: K8S_SERVICE_NAME
              value: rabbitmq-rabbitmq-ha-discovery
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-rabbitmq-ha
                  key: rabbitmq-erlang-cookie
            - name: RABBIT_MANAGEMENT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-rabbitmq-ha
                  key: rabbitmq-management-username
            - name: RABBIT_MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-rabbitmq-ha
                  key: rabbitmq-management-password
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              memory: 1024Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            - name: definitions
              mountPath: /etc/definitions
              readOnly: true

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: 'kubernetes.io/hostname'
                labelSelector:
                  matchLabels:
                    app: rabbitmq-ha
                    release: rabbitmq
      volumes:
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
            name: rabbitmq-rabbitmq-ha
        - name: definitions
          secret:
            secretName: rabbitmq-rabbitmq-ha
            items:
              - key: definitions.json
                path: definitions.json
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - 'ReadWriteOnce'
        resources:
          requests:
            storage: '8Gi'
        storageClassName: 'acs-abs'
